print(nrow(df.assessment))
} else {
vars <- c('Class_Standing', 'Gender', 'URM_Status', 'First_Gen_Status', 'AP_Calculus_AB', 'AP_Calculus_BC',
'ACT_SAT_Math_Percentile', 'PreScores', 'PostScores', 'Season', 'Sequence', 'Course_Content', 'Class')
df.assessment <- df[Assessment == assessment & (!is.na(PreScores) & !is.na(PostScores))]
}
df.assessment <- df.assessment %>%
select(vars) %>%
mutate(Class_Standing = relevel(as.factor(case_when(
Class_Standing == 'Fresh' ~ 'FY',
Class_Standing == 'Sophomore' | Class_Standing == 'Junior' | Class_Standing == 'Senior' ~ 'BFY',
TRUE ~ NA_character_
)), ref = 'FY'),
Gender = relevel(as.factor(Gender), ref = 'M'),
URM_Status = relevel(as.factor(URM_Status), ref = 'Majority'),
First_Gen_Status = relevel(as.factor(First_Gen_Status), ref = 'ContGen'),
AP_Calculus_AB = relevel(as.factor(AP_Calculus_AB), ref = 'NotTaken'),
AP_Calculus_BC = relevel(as.factor(AP_Calculus_BC), ref = 'NotTaken'),
Season = relevel(as.factor(Season), ref = 'FA'),
Sequence = relevel(as.factor(Sequence), ref = 'Engineering'),
Course_Content = as.factor(Course_Content),
Class = as.factor(Class),
ACT_SAT_Math_Percentile = c(scale(ACT_SAT_Math_Percentile, scale = TRUE)),
PreScores = c(scale(PreScores, scale = TRUE)),
PostScores = c(scale(PostScores, scale = TRUE)))
if(impute){
levels(df.assessment$Class) <- 1:length(levels(df.assessment$Class))
df.assessment$Class <- as.numeric(df.assessment$Class)
Frac.Missing <- round(sum(is.na(df.assessment$PreScores) |
is.na(df.assessment$PostScores))/nrow(df.assessment) * 100)
print(Frac.Missing)
ini <- mice(df.assessment, maxit = 0)
predM <- ini$predictorMatrix
iniM <- ini$method
predM[, 'Class'] <- -2
# print(iniM)
iniM <- c('', '', '', '', '', '', '', '', '2l.pmm', '2l.pmm', '', '', '', '')
# iniM <- c('', '', '', '', '', '', '', '2l.pmm', '2l.pmm', '', '', '', '')
set.seed(11)
imp.dat <- mice(df.assessment, m = Frac.Missing, pred = predM, met = iniM, print = FALSE)
return(imp.dat)
}
return(df.assessment)
}
Do.Regressions <- function(dat, assessment) {
fit0 <- lmer(PostScores ~ (1 | Class), dat)
print(summary(fit0))
print(r.squaredGLMM(fit0))
print(AIC(fit0))
fit1a <- lmer(PostScores ~ Gender + (1 | Class), dat)
print(summary(fit1a))
print(r.squaredGLMM(fit1a))
print(AIC(fit1a))
fit1b <- lmer(PostScores ~ URM_Status + (1 | Class), dat)
print(summary(fit1b))
print(r.squaredGLMM(fit1b))
print(AIC(fit1b))
fit1c <- lmer(PostScores ~ Class_Standing + (1 | Class), dat)
print(summary(fit1c))
print(r.squaredGLMM(fit1c))
print(AIC(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
print(AIC(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
print(AIC(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
print(AIC(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
print(AIC(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
fit5 <- lmer(PostScores - PreScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores - PreScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
print(AIC(fit5))
#fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
#print(AIC(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
df.CSEM <- Load.Clean.Data(assessment = 'CSEM')
df.CSEM.fit5 <- Do.Regressions(df.CSEM, assessment = 'CSEM')
plot(df.CSEM.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
CSEM.Coefs <- df.CSEM.fit5$Coefs
vif(df.CSEM.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.CSEM.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.CSEM.fit5$dataframe))
qqmath(df.CSEM.fit5$model)
library(pwr)
library(WebPower)
library(tidyverse)
library(reshape2)
power.vec <- seq(0.13, 0.99, 0.01)
wp.regression(p1 = 13, p2 = 9, f2 = 0.02, alpha = 0.05, power = 0.8)
Power.func <- function(effect, power){
out <- wp.regression(p1 = 13, p2 = 9, f2 = effect, alpha = 0.05, power = power)
return(out$n)
}
#wp.regression(p1 = 8, p2 = 2, f2 = 0.02, alpha = 0.05, power = 0.99)
df <- data.frame(Power = power.vec, N1 = sapply(power.vec, Power.func, effect = 0.02)) %>%#,
#N2 = sapply(power.vec, Power.func, effect = 0.15),
#N3 = sapply(power.vec, Power.func, effect = 0.35)) %>%
melt(., id.vars = 'Power')
ggplot(df, aes(x = value, y = Power, color = variable)) +
#geom_point() +
theme_classic() +
geom_line(size = 1) +
labs(x = 'Sample size') +
geom_vline(xintercept = df[(df$Power == 0.8) & (df$variable == 'N1'), 'value'], linetype = 3, color = 'black', size = 1)
#p.out <- pwr.f2.test(u = 8, f2 = 0.02, sig.level = 0.05, power = 0.8)
#p.out$v + p.out$u + 1
power.vec <- seq(0.13, 0.99, 0.01)
wp.regression(p1 = 13, p2 = 9, f2 = 0.02, alpha = 0.05, power = 0.8)
Power.func <- function(effect, power){
out <- wp.regression(p1 = 13, p2 = 9, f2 = effect, alpha = 0.05, power = power)
return(out$n)
}
#wp.regression(p1 = 8, p2 = 2, f2 = 0.02, alpha = 0.05, power = 0.99)
df <- data.frame(Power = power.vec, N1 = sapply(power.vec, Power.func, effect = 0.02)) %>%#,
#N2 = sapply(power.vec, Power.func, effect = 0.15),
#N3 = sapply(power.vec, Power.func, effect = 0.35)) %>%
melt(., id.vars = 'Power')
ggplot(df, aes(x = value, y = Power)) +
#geom_point() +
theme_classic() +
geom_line(size = 1) +
labs(x = 'Sample size') +
geom_vline(xintercept = df[(df$Power == 0.8) & (df$variable == 'N1'), 'value'], linetype = 3, color = 'black', size = 1)
#p.out <- pwr.f2.test(u = 8, f2 = 0.02, sig.level = 0.05, power = 0.8)
#p.out$v + p.out$u + 1
ggplot(df, aes(x = value, y = Power)) +
#geom_point() +
theme_classic() +
geom_line(size = 1) +
labs(x = 'Sample size') +
geom_vline(xintercept = df[(df$Power == 0.8) & (df$variable == 'N1'), 'value'], linetype = 3, color = 'black', size = 1)
library(data.table)
library(tidyverse)
library(broom)
library(lmerTest)
library(mice)
library(miceadds)
library(MuMIn)
library(stargazer)
library(lattice)
library(simr)
library(car)
library(tableone)
library(data.table)
library(tidyverse)
library(broom)
library(lmerTest)
library(mice)
library(miceadds)
library(MuMIn)
library(stargazer)
library(lattice)
library(simr)
library(car)
library(tableone)
Load.Clean.Data <- function(File = 'C:/Users/Cole/Documents/GRA_Summer2019/MasterDiagnosticDataConstruction/MasterData.csv',
assessment, impute = FALSE) {
df <- fread(File)
if(impute){
vars <- c('Class_Standing', 'Gender', 'URM_Status', 'First_Gen_Status', 'GPA', 'AP_Calculus_AB', 'AP_Calculus_BC', 'ACT_SAT_Math_Percentile', 'PreScores', 'PostScores', 'Season', 'Sequence', 'Course_Content', 'Class')
df.assessment <- df[Assessment == assessment]
# df.assessment <- df[Assessment == assessment & (!is.na(PreScores) | !is.na(PostScores))]
print(nrow(df.assessment))
} else {
vars <- c('Class_Standing', 'Gender', 'URM_Status', 'First_Gen_Status', 'AP_Calculus_AB', 'AP_Calculus_BC',
'ACT_SAT_Math_Percentile', 'PreScores', 'PostScores', 'Season', 'Sequence', 'Course_Content', 'Class')
df.assessment <- df[Assessment == assessment & (!is.na(PreScores) & !is.na(PostScores))]
}
df.assessment <- df.assessment %>%
select(vars) %>%
mutate(Class_Standing = relevel(as.factor(case_when(
Class_Standing == 'Fresh' ~ 'FY',
Class_Standing == 'Sophomore' | Class_Standing == 'Junior' | Class_Standing == 'Senior' ~ 'BFY',
TRUE ~ NA_character_
)), ref = 'FY'),
Gender = relevel(as.factor(Gender), ref = 'M'),
URM_Status = relevel(as.factor(URM_Status), ref = 'Majority'),
First_Gen_Status = relevel(as.factor(First_Gen_Status), ref = 'ContGen'),
AP_Calculus_AB = relevel(as.factor(AP_Calculus_AB), ref = 'NotTaken'),
AP_Calculus_BC = relevel(as.factor(AP_Calculus_BC), ref = 'NotTaken'),
Season = relevel(as.factor(Season), ref = 'FA'),
Sequence = relevel(as.factor(Sequence), ref = 'Engineering'),
Course_Content = as.factor(Course_Content),
Class = as.factor(Class),
ACT_SAT_Math_Percentile = c(scale(ACT_SAT_Math_Percentile, scale = TRUE)),
PreScores = c(scale(PreScores, scale = TRUE)),
PostScores = c(scale(PostScores, scale = TRUE)))
if(impute){
levels(df.assessment$Class) <- 1:length(levels(df.assessment$Class))
df.assessment$Class <- as.numeric(df.assessment$Class)
Frac.Missing <- round(sum(is.na(df.assessment$PreScores) |
is.na(df.assessment$PostScores))/nrow(df.assessment) * 100)
print(Frac.Missing)
ini <- mice(df.assessment, maxit = 0)
predM <- ini$predictorMatrix
iniM <- ini$method
predM[, 'Class'] <- -2
# print(iniM)
iniM <- c('', '', '', '', '', '', '', '', '2l.pmm', '2l.pmm', '', '', '', '')
# iniM <- c('', '', '', '', '', '', '', '2l.pmm', '2l.pmm', '', '', '', '')
set.seed(11)
imp.dat <- mice(df.assessment, m = Frac.Missing, pred = predM, met = iniM, print = FALSE)
return(imp.dat)
}
return(df.assessment)
}
Do.Regressions <- function(dat, assessment) {
fit0 <- lmer(PostScores ~ (1 | Class), dat)
print(summary(fit0))
print(r.squaredGLMM(fit0))
print(AIC(fit0))
fit1a <- lmer(PostScores ~ Gender + (1 | Class), dat)
print(summary(fit1a))
print(r.squaredGLMM(fit1a))
print(AIC(fit1a))
fit1b <- lmer(PostScores ~ URM_Status + (1 | Class), dat)
print(summary(fit1b))
print(r.squaredGLMM(fit1b))
print(AIC(fit1b))
fit1c <- lmer(PostScores ~ Class_Standing + (1 | Class), dat)
print(summary(fit1c))
print(r.squaredGLMM(fit1c))
print(AIC(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
print(AIC(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
print(AIC(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
print(AIC(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
print(AIC(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
dat$Course_Content <- relevel(dat$Course_Content, ref = 'Mechanics')
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = 'na.fail')
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = 'na.fail')
fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
print(AIC(fit5))
#fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
#print(AIC(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
Do.Regressions <- function(dat, assessment) {
fit0 <- lmer(PostScores ~ (1 | Class), dat)
print(summary(fit0))
print(r.squaredGLMM(fit0))
print(AIC(fit0))
fit1a <- lmer(PostScores ~ Gender + (1 | Class), dat)
print(summary(fit1a))
print(r.squaredGLMM(fit1a))
print(AIC(fit1a))
fit1b <- lmer(PostScores ~ URM_Status + (1 | Class), dat)
print(summary(fit1b))
print(r.squaredGLMM(fit1b))
print(AIC(fit1b))
fit1c <- lmer(PostScores ~ Class_Standing + (1 | Class), dat)
print(summary(fit1c))
print(r.squaredGLMM(fit1c))
print(AIC(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
print(AIC(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
print(AIC(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
print(AIC(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
print(AIC(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
dat$Course_Content <- relevel(dat$Course_Content, ref = 'Mechanics')
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = 'na.fail')
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = 'na.fail')
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
print(AIC(fit5))
#fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
#print(AIC(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
df = read.csv('C:/Users/Cole/Documents/GRA_Summer2019/MasterDiagnosticDataConstruction/MasterData.csv')
vars = c("PreScores", "PostScores", "ACT_SAT_Math_Percentile", "Gender", "URM_Status", "Class_Standing", "First_Gen_Status", "AP_Calculus_AB", "AP_Calculus_BC", "Season", "Sequence", "Course_Content")
CreateTableOne(vars = vars, strata = c("Assessment"), data = df[!is.na(df$PreScores) & !is.na(df$PostScores),])
df.PLIC <- Load.Clean.Data(assessment = 'PLIC')
df.PLIC.fit5 <-  Do.Regressions(df.PLIC, assessment = 'PLIC')
plot(df.PLIC.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
PLIC.Coefs <- df.PLIC.fit5$Coefs
vif(df.PLIC.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.PLIC.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.PLIC.fit5$dataframe))
qqmath(df.PLIC.fit5$model)
df.ECLASS <- Load.Clean.Data(assessment = 'ECLASS')
df.ECLASS.fit5 <- Do.Regressions(df.ECLASS, assessment = 'ECLASS')
plot(df.ECLASS.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
ECLASS.Coefs <- df.ECLASS.fit5$Coefs
vif(df.ECLASS.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.ECLASS.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.ECLASS.fit5$dataframe))
qqmath(df.ECLASS.fit5$model)
install.packages("corrgram")
library(broom.mixed)
library(tidyverse)
library(data.table)
source('C:/Users/Cole/Documents/GitHub/PLIC/Process-Merge-Concat/PLIC_DataProcessing.R')
library(effsize)
library(lsr)
library(lme4)
library(lmerTest)
library(MuMIn)
library(stargazer)
library(lavaan)
library(semPlot)
library(sjPlot)
library(taRifx)
library(rstatix)
library(corrgram)
df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Clean.PLIC(., Matched = TRUE, Collapse.vars = FALSE) %>%
Merge.CIS(., Matched = TRUE) %>%
filter((Lab_Level == 'Intro-Algebra') | (Lab_Level == 'Intro-Calculus'))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
# unique(df$School)
# Gender non-binaries?
table(df$Gender, exclude = NULL)
df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Clean.PLIC(., Matched = TRUE) %>%
Merge.CIS(., Matched = TRUE) %>%
filter(Survey_x == 'C' | Survey_y == 'C') %>%
filter((Lab_Level == 'Intro-Algebra') | (Lab_Level == 'Intro-Calculus'))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
# Filter by student demographics
df <- df %>%
filter(!is.na(Gender) & !is.na(Ethnicity) & !is.na(Major))
df %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
df <- data.table(df)[, `:=`(N.students = .N, pre.rate = sum(Survey_x == 'C')/.N,
post.rate = sum(Survey_y == 'C')/.N),
.(Class_ID)]
data.frame(df[pre.rate == 0]) %>%
summarize(N.Classes = length(unique(.[, 'Class_ID'])))
# df[post.rate == 0 & !duplicated(Class_ID)]$Class_ID
data.frame(df[post.rate == 0]) %>%
summarize(N.Classes = length(unique(.[, 'Class_ID'])))
df <- df[pre.rate >= 0.4 & post.rate >= 0.4]
data.frame(df) %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
df <- df[Survey_x == 'C' & Survey_y == 'C']
data.frame(df) %>%
summarize(N.Students = nrow(.), N.Classes = length(unique(.[, 'Class_ID'])), N.Schools = length(unique(.[, 'School'])))
table(df[!duplicated(df$School),]$Institution_Type, exclude = NULL)
table(df[!duplicated(df$Class_ID),]$Lab_Level, exclude = NULL)
table(df[!duplicated(df$Class_ID),]$Lab_Purpose, exclude = NULL)
df <- df %>%
mutate(Gender = relevel(as.factor(Gender), ref = 'Men'),
URM_Status = relevel(as.factor(URM_Status), ref = 'Majority'),
Major = relevel(as.factor(Major), ref = 'Other'),
Lab_Level = relevel(as.factor(Lab_Level), ref = 'Intro-Algebra'),
Lab_Purpose = relevel(as.factor(Lab_Purpose), ref = 'Reinforce physics concepts'))
df.Centered <- Create.Class.Variables(df)
df.Centered$GenW <- df.Centered$Gender == 'Women'
df.Centered$MajorEng <- df.Centered$Major == 'Engineering'
df.Centered$MajorPhys <- df.Centered$Major == 'Physics'
df.class <- japply(df.Centered, grepl('Q28|Q29|Q31|Q32|Q33', names(df.Centered)),
function(x) as.numeric(levels(x))[x]) %>%
filter(!duplicated(Class_ID)) %>%
select(c('Lab_Purpose', grep('Q28|Q29|Q31|Q32|Q33', names(df.Centered)))) %>%
filter(Lab_Purpose != 'Both about equally') %>%
mutate(Lab_Purpose = droplevels(Lab_Purpose))
wilcox.summary <- wilcox_effsize(df.class, Q28_1 ~ Lab_Purpose, ci = TRUE, conf.level = 0.67, nboot = 100)[, c('.y.', 'effsize', 'conf.low', 'conf.high')]
for(col in colnames(df.class[, 3:ncol(df.class)])){
wilcox.summary <- rbind(wilcox.summary, wilcox_effsize(df.class, formula(paste(col, ' ~ Lab_Purpose')), ci = TRUE, conf.level = 0.67, nboot = 100)[, c('.y.', 'effsize', 'conf.low', 'conf.high')])
}
df1 <- data.frame(sapply(df.class[df.class$Lab_Purpose == 'Reinforce physics concepts', 2:ncol(df.class)], mean))
df2 <- data.frame(sapply(df.class[df.class$Lab_Purpose == 'Develop lab skills', 2:ncol(df.class)], mean))
df <- df2 - df1
colnames(df) <- c('diff.in.means')
df$diff.in.means <- 2 * (df$diff.in.means > 0) - 1
wilcox.summary <- wilcox.summary %>%
mutate(Group = str_sub(.y., 1, 3),
Element = str_sub(.y., -1, -1),
effsize = effsize * df$diff.in.means,
conf.low = conf.low * df$diff.in.means,
conf.high = conf.high * df$diff.in.means)
wilcox.summary
df.class %>%
group_by(Lab_Purpose)
#   wilcox_effsize(df.class, Q33_3 ~ Lab_Purpose, ci = TRUE, conf.level = 0.67, nboot = 100)
#
# wilcox_effsize(df.class, Q33_3 ~ Lab_Purpose, ci = TRUE, conf.level = 0.67, nboot = 100)[, c('effsize', 'conf.low', 'conf.high')]
# levels(df.class$Lab_Purpose)
# y$conf.int
#
# wilcox.summary <- data.frame(sapply(df.class[, 2:ncol(df.class)], function(x)  wilcox.test(x[df.class$Lab_Purpose == 'Reinforce physics concepts'], x[df.class$Lab_Purpose == 'Develop lab skills'], correct = FALSE, conf.int = TRUE))) %>%
#   mutate(Question = str_sub(rownames(.), 1, 5))
#
# rownames(wilcox.summary) <- c()
# colnames(wilcox.summary) <- c('Median.difference', 'Question')
# wilcox.summary
wilcox.summary
ggplot(wilcox.summary, aes(x = .y., y = effsize, shape = Group, color = Group)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), size = 1) +
coord_flip() +
theme(axis.line.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = 'top') +
geom_hline(yintercept = 0, size = 1, linetype = 'dashed') +
geom_text(aes(label = .y., y = conf.high), wilcox.summary[wilcox.summary$effsize > 0,], hjust = -0.25) +
geom_text(aes(label = .y., y = conf.high), wilcox.summary[wilcox.summary$effsize < 0,], hjust = 1.25) +
ylim(-1.1, 1.1) +
scale_color_manual(values = c('#e69f00', '#56b3e9', '#009e74', '#0071b2', '#cc79a7')) +
ylab('Wilcoxon effect size (r)')
df.class
corrgram(df.class[, 2:ncol(df.class)])
corrgram(df.class[, 2:ncol(df.class)], cor.method = 'spearman')
corrgram(df.class[, 2:ncol(df.class)], cor.method = 'spearman')
