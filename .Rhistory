print(r.squaredGLMM(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
#fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
return(list("model" = fit5, "dataframe" = dat))
}
df.PLIC <- Load.Clean.Data(assessment = 'PLIC')
df.PLIC.fit5 <-  Do.Regressions(df.PLIC, assessment = 'PLIC')
plot(df.PLIC.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
# boxplot(resid.abs.2 ~ Class, df.PLIC.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.PLIC.fit5$dataframe))
qqmath(df.PLIC.fit5$model)
summary(df.PLIC.fit5$model)
summary(df.PLIC.fit5$model)$coefficients
summary(df.PLIC.fit5$model)$coefficients$GenderF
summary(df.PLIC.fit5$model)$coefficients
summary(df.PLIC.fit5$model)$coefficients[2]
summary(df.PLIC.fit5$model)$coefficients
tidy(df.PLIC.fit5$model)
library(data.table)
library(tidyverse)
library(broom)
library(lmerTest)
library(MuMIn)
library(stargazer)
library(lattice)
library(simr)
tidy(df.PLIC.fit5$model)
tidy(df.PLIC.fit5$model) %>%
mutate(Model = 5)
Do.Regressions <- function(dat, assessment) {
fit0 <- lmer(PostScores ~ (1 | Class), dat)
print(summary(fit0))
print(r.squaredGLMM(fit0))
fit1a <- lmer(PostScores ~ Gender + (1 | Class), dat)
print(summary(fit1a))
print(r.squaredGLMM(fit1a))
fit1b <- lmer(PostScores ~ URM_Status + (1 | Class), dat)
print(summary(fit1b))
print(r.squaredGLMM(fit1b))
fit1c <- lmer(PostScores ~ Class_Standing + (1 | Class), dat)
print(summary(fit1c))
print(r.squaredGLMM(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
#fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
df.PLIC <- Load.Clean.Data(assessment = 'PLIC')
df.PLIC.fit5 <-  Do.Regressions(df.PLIC, assessment = 'PLIC')
plot(df.PLIC.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
df.PLIC.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.PLIC.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.PLIC.fit5$dataframe))
qqmath(df.PLIC.fit5$model)
PLIC.Coefs <- df.PLIC.fit5$Coefs
df.ECLASS <- Load.Clean.Data(assessment = 'ECLASS')
df.ECLASS.fit5 <- Do.Regressions(df.ECLASS, assessment = 'ECLASS')
plot(df.ECLASS.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
ECLASS.Coefs <- df.ECLASS.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.ECLASS.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.ECLASS.fit5$dataframe))
qqmath(df.ECLASS.fit5$model)
df.MBT <- Load.Clean.Data(assessment = 'MBT')
df.MBT.fit5 <- Do.Regressions(df.MBT, assessment = 'MBT')
plot(df.MBT.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
MBT.Coefs <- df.MBT.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.MBT.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.MBT.fit5$dataframe))
qqmath(df.MBT.fit5$model)
df.CSEM <- Load.Clean.Data(assessment = 'CSEM')
df.CSEM.fit5 <- Do.Regressions(df.CSEM, assessment = 'CSEM')
plot(df.CSEM.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
CSEM.Coefs <- df.CSEM.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.CSEM.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.CSEM.fit5$dataframe))
qqmath(df.CSEM.fit5$model)
Coefs <- rbind(PLIC.Coefs %>% mutate(Assessment = 'PLIC'), ECLASS.Coefs %>% mutate(Assessment = 'E-CLASS'), MBT.Coefs %>% mutate(Assessment = 'MBT'), CSEM.Coefs %>% mutate(Assessment = 'CSEM'))
Coefs
Coefs <- rbind(PLIC.Coefs %>% mutate(Assessment = 'PLIC'), ECLASS.Coefs %>% mutate(Assessment = 'E-CLASS'), MBT.Coefs %>% mutate(Assessment = 'MBT'), CSEM.Coefs %>% mutate(Assessment = 'CSEM')) %>%
filter(term == 'GenderF' | term == 'URM_StatusURM' | term == 'Class_StandingBFY' | term == 'First_Gen_StatusFirstGen')
Coefs
ggplot(Coefs, aes(x = Model, y = estimate)) +
geom_point() +
facet_wrap(~Assessment)
Coefs
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
facet_wrap(~Assessment)
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
facet_grid(~Assessment)
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
facet_grid(rows = vars(Assessment), scales = 'free')
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
facet_grid(rows = vars(Assessment), scales = 'free', space = 'free')
Coefs <- rbind(PLIC.Coefs %>% mutate(Assessment = 'PLIC'), ECLASS.Coefs %>% mutate(Assessment = 'E-CLASS'), MBT.Coefs %>% mutate(Assessment = 'MBT'), CSEM.Coefs %>% mutate(Assessment = 'CSEM')) %>%
filter(term == 'GenderF' | term == 'URM_StatusURM' | term == 'Class_StandingBFY' | term == 'First_Gen_StatusFirstGen') %>%
mutate(Model = as.character(Model))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
facet_grid(rows = vars(Assessment)) +
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
facet_grid(rows = vars(Assessment)) +
theme(legend.position = "none",
axis.text.y = element_blank())
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
facet_grid(rows = vars(Assessment)) +
theme(legend.position = "none")
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
facet_grid(rows = vars(Assessment))
Coefs
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_point() +
geom_errorbar(ymin = (estimate - std.error), ymax = (estimate + std.error)) +
facet_grid(rows = vars(Assessment))
Coefs
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error))) +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.2) +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.1) +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
geom_line() +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_line() +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
stat_summary(fun.y = mean, geom = 'line') +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
stat_summary(fun.y = 'mean', geom = 'line') +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
geom_line() +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, group = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
geom_line() +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = Model, y = estimate, group = term, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
geom_line() +
facet_grid(rows = vars(Assessment))
ggplot(Coefs, aes(x = term, y = estimate)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
facet_grid(rows = vars(Model))
ggplot(Coefs, aes(x = term, y = estimate)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
facet_grid(cols = vars(Model))
ggplot(Coefs, aes(x = term, y = estimate, color = Assessment)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
facet_grid(cols = vars(Model))
ggplot(Coefs, aes(x = Model, y = estimate, group = term, color = term)) +
geom_errorbar(aes(ymin = (estimate - std.error), ymax = (estimate + std.error)), width = 0.15) +
geom_line() +
facet_grid(rows = vars(Assessment))
library(car)
Load.Clean.Data <- function(File = 'C:/Users/Cole/Documents/GRA_Summer2019/MasterDiagnosticDataConstruction/MasterData.csv',
assessment) {
df <- fread(File)
df.assessment <- df[Assessment == assessment & (!is.na(PreScores) & !is.na(PostScores))] %>%
select(Class_Standing, Gender, URM_Status, First_Gen_Status, AP_Calculus_AB, AP_Calculus_BC, ACT_SAT_Math_Percentile, PreScores, PostScores, Season, Sequence, Course_Content, Class) %>%
mutate(Class_Standing = relevel(as.factor(case_when(
Class_Standing == 'Fresh' ~ 'FY',
Class_Standing == 'Sophomore' | Class_Standing == 'Junior' | Class_Standing == 'Senior' ~ 'BFY',
TRUE ~ NA_character_
)), ref = 'FY'),
Gender = relevel(as.factor(Gender), ref = 'M'),
URM_Status = relevel(as.factor(URM_Status), ref = 'Majority'),
First_Gen_Status = relevel(as.factor(First_Gen_Status), ref = 'ContGen'),
AP_Calculus_AB = relevel(as.factor(AP_Calculus_AB), ref = 'NotTaken'),
AP_Calculus_BC = relevel(as.factor(AP_Calculus_BC), ref = 'NotTaken'),
Season = relevel(as.factor(Season), ref = 'FA'),
Sequence = relevel(as.factor(Sequence), ref = 'Engineering'),
Course_Content = as.factor(Course_Content),
Class = as.factor(Class),
ACT_SAT_Math_Percentile = c(scale(ACT_SAT_Math_Percentile, scale = TRUE)),
PreScores = c(scale(PreScores, scale = TRUE)),
PostScores = c(scale(PostScores, scale = TRUE))) %>%
filter(!is.na(URM_Status) & !is.na(Class_Standing) & !is.na(ACT_SAT_Math_Percentile))
return(df.assessment)
}
Do.Regressions <- function(dat, assessment) {
fit0 <- lmer(PostScores ~ (1 | Class), dat)
print(summary(fit0))
print(r.squaredGLMM(fit0))
print(AIC(fit0))
fit1a <- lmer(PostScores ~ Gender + (1 | Class), dat)
print(summary(fit1a))
print(r.squaredGLMM(fit1a))
print(AIC(fit1a))
fit1b <- lmer(PostScores ~ URM_Status + (1 | Class), dat)
print(summary(fit1b))
print(r.squaredGLMM(fit1b))
print(AIC(fit1b))
fit1c <- lmer(PostScores ~ Class_Standing + (1 | Class), dat)
print(summary(fit1c))
print(r.squaredGLMM(fit1c))
print(AIC(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
print(AIC(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
print(AIC(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
print(AIC(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
print(AIC(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
print(AIC(fit5))
#fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
#print(AIC(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
df.PLIC <- Load.Clean.Data(assessment = 'PLIC')
library(data.table)
library(tidyverse)
library(broom)
library(lmerTest)
library(MuMIn)
library(stargazer)
library(lattice)
library(simr)
library(car)
Load.Clean.Data <- function(File = 'C:/Users/Cole/Documents/GRA_Summer2019/MasterDiagnosticDataConstruction/MasterData.csv',
assessment) {
df <- fread(File)
df.assessment <- df[Assessment == assessment & (!is.na(PreScores) & !is.na(PostScores))] %>%
select(Class_Standing, Gender, URM_Status, First_Gen_Status, AP_Calculus_AB, AP_Calculus_BC, ACT_SAT_Math_Percentile, PreScores, PostScores, Season, Sequence, Course_Content, Class) %>%
mutate(Class_Standing = relevel(as.factor(case_when(
Class_Standing == 'Fresh' ~ 'FY',
Class_Standing == 'Sophomore' | Class_Standing == 'Junior' | Class_Standing == 'Senior' ~ 'BFY',
TRUE ~ NA_character_
)), ref = 'FY'),
Gender = relevel(as.factor(Gender), ref = 'M'),
URM_Status = relevel(as.factor(URM_Status), ref = 'Majority'),
First_Gen_Status = relevel(as.factor(First_Gen_Status), ref = 'ContGen'),
AP_Calculus_AB = relevel(as.factor(AP_Calculus_AB), ref = 'NotTaken'),
AP_Calculus_BC = relevel(as.factor(AP_Calculus_BC), ref = 'NotTaken'),
Season = relevel(as.factor(Season), ref = 'FA'),
Sequence = relevel(as.factor(Sequence), ref = 'Engineering'),
Course_Content = as.factor(Course_Content),
Class = as.factor(Class),
ACT_SAT_Math_Percentile = c(scale(ACT_SAT_Math_Percentile, scale = TRUE)),
PreScores = c(scale(PreScores, scale = TRUE)),
PostScores = c(scale(PostScores, scale = TRUE))) %>%
filter(!is.na(URM_Status) & !is.na(Class_Standing) & !is.na(ACT_SAT_Math_Percentile))
return(df.assessment)
}
Do.Regressions <- function(dat, assessment) {
fit0 <- lmer(PostScores ~ (1 | Class), dat)
print(summary(fit0))
print(r.squaredGLMM(fit0))
print(AIC(fit0))
fit1a <- lmer(PostScores ~ Gender + (1 | Class), dat)
print(summary(fit1a))
print(r.squaredGLMM(fit1a))
print(AIC(fit1a))
fit1b <- lmer(PostScores ~ URM_Status + (1 | Class), dat)
print(summary(fit1b))
print(r.squaredGLMM(fit1b))
print(AIC(fit1b))
fit1c <- lmer(PostScores ~ Class_Standing + (1 | Class), dat)
print(summary(fit1c))
print(r.squaredGLMM(fit1c))
print(AIC(fit1c))
fit1d <- lmer(PostScores ~ First_Gen_Status + (1 | Class), dat)
print(summary(fit1d))
print(r.squaredGLMM(fit1d))
print(AIC(fit1d))
fit2 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + (1 | Class), dat)
print(summary(fit2))
print(r.squaredGLMM(fit2))
print(AIC(fit2))
fit3 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + (1 | Class), dat)
print(summary(fit3))
print(r.squaredGLMM(fit3))
print(AIC(fit3))
fit4 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + (1 | Class), dat)
print(summary(fit4))
print(r.squaredGLMM(fit4))
print(AIC(fit4))
if(assessment == 'PLIC' | assessment == 'ECLASS'){
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + Course_Content + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + Course_Content + (1 | Class), dat)
} else {
fit5 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + ACT_SAT_Math_Percentile + AP_Calculus_AB + AP_Calculus_BC + Season + Sequence + (1 | Class), dat, na.action = "na.fail")
#fit6 <- lmer(PostScores ~ Gender + URM_Status + Class_Standing + First_Gen_Status + PreScores + Season + Sequence + (1 | Class), dat)
}
print(summary(fit5))
print(r.squaredGLMM(fit5))
print(AIC(fit5))
#fit6 <- get.models(dredge(fit5, rank = 'AIC'), subset = 1)[[1]]
#print(summary(fit6))
#print(r.squaredGLMM(fit6))
#print(AIC(fit6))
class(fit0) <- "lmerMod"
class(fit1a) <- "lmerMod"
class(fit1b) <- "lmerMod"
class(fit1c) <- "lmerMod"
class(fit1d) <- "lmerMod"
class(fit2) <- "lmerMod"
class(fit3) <- "lmerMod"
class(fit4) <- "lmerMod"
class(fit5) <- "lmerMod"
#class(fit6) <- "lmerMod"
#stargazer(fit0, fit1a, fit1b, fit1c, fit1d, fit2, fit3, fit4, fit5, fit6, star.cutoffs = c(0.05, 0.01, 0.001), intercept.bottom = FALSE, out = paste(assessment, '.tex'), intercept.top = TRUE, omit.stat = 'all')
# dat$resid <- resid(fit5)
# dat$resid.abs <- abs(dat$resid)
# dat$resid.abs.2 <- dat$resid.abs^2
# dat$pred <- fitted(fit5)
Coefs.summary <- rbind(rbind(tidy(fit1a), tidy(fit1b), tidy(fit1c), tidy(fit1d)) %>% mutate(Model = 1), tidy(fit2) %>% mutate(Model = 2), tidy(fit3) %>% mutate(Model = 3), tidy(fit5) %>% mutate(Model = 5))
return(list("model" = fit5, "dataframe" = dat, 'Coefs' = Coefs.summary))
}
df.PLIC <- Load.Clean.Data(assessment = 'PLIC')
df.PLIC.fit5 <-  Do.Regressions(df.PLIC, assessment = 'PLIC')
plot(df.PLIC.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
PLIC.Coefs <- df.PLIC.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.PLIC.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.PLIC.fit5$dataframe))
qqmath(df.PLIC.fit5$model)
vif(df.PLIC.fit5$model)
df.MBT <- Load.Clean.Data(assessment = 'MBT')
df.MBT.fit5 <- Do.Regressions(df.MBT, assessment = 'MBT')
plot(df.MBT.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
MBT.Coefs <- df.MBT.fit5$Coefs
# boxplot(resid.abs.2 ~ Class, df.MBT.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.MBT.fit5$dataframe))
qqmath(df.MBT.fit5$model)
vif(df.MBT.fit5$model)
df.CSEM <- Load.Clean.Data(assessment = 'CSEM')
df.CSEM.fit5 <- Do.Regressions(df.CSEM, assessment = 'CSEM')
plot(df.CSEM.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
CSEM.Coefs <- df.CSEM.fit5$Coefs
vif(df.CSEM.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.CSEM.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.CSEM.fit5$dataframe))
qqmath(df.CSEM.fit5$model)
df.MBT <- Load.Clean.Data(assessment = 'MBT')
df.MBT.fit5 <- Do.Regressions(df.MBT, assessment = 'MBT')
plot(df.MBT.fit5$model, xlab = 'Fitted values', ylab = 'Residuals')
MBT.Coefs <- df.MBT.fit5$Coefs
vif(df.MBT.fit5$model)
# boxplot(resid.abs.2 ~ Class, df.MBT.fit5$dataframe)
# anova(lm(resid.abs.2 ~ Class, data = df.MBT.fit5$dataframe))
qqmath(df.MBT.fit5$model)
VarCorr(df.MBT.fit5$model)
as.data.frame(VarCorr(df.MBT.fit5$model))
summary(df.MBT.fit5$model)
anova(df.MBT.fit5$model)
install.packages("VCA")
library(VCA)
VCAinference(df.MBT.fit5$model)
VCAinference(df.MBT.fit5$model, VarVC = TRUE)
aov(df.MBT.fit5$model)
anova(df.MBT.fit5$model)
var(df.MBT.fit5$model)
install.packages("mixlm")
Anova(df.MBT.fit5$model)
Anova(df.MBT.fit5$model, type = 'III')
Anova(df.MBT.fit5$model)
anova(df.MBT.fit5$model)
Anova(df.MBT.fit5$model)
summary(df.MBT.fit5$model)
fit <- lmer(PostScores ~ (1 | Class), df.MBT)
anova(fit)
anova(df.MBT.fit5$model)
anova(fit)
fit <- lmer(PostScores ~ 1 + (1 | Class), df.MBT)
anova(fit)
fit <- lmer(PostScores ~ (1 | Class), df.MBT)
anova(fit)
anova(fit, df.MBT.fit5$model)
anova(fit, lmer(PostScores ~ Gender + (1 | Class), df.MBT))
fit <- lmer(PostScores ~ (1 | Class), df.MBT, REML = FALSE)
anova(fit, lmer(PostScores ~ Gender + (1 | Class), df.MBT, REML = FALSE))
fit <- lmer(PostScores ~ (1 | Class), df.MBT, REML = TRUE)
anova(fit, lmer(PostScores ~ Gender + (1 | Class), df.MBT, REML = TRUE))
